AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: FeedMiner - Universal saved content processor with Strands agents

Parameters:
  # Core Application Parameters
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Deployment environment
  
  AnthropicApiKey:
    Type: String
    NoEcho: true
    Description: Anthropic API key for Claude integration
  
  # Multi-Model AI Integration Parameters (v0.2.0)
  PrimaryAIProvider:
    Type: String
    Default: "anthropic"
    AllowedValues: ["anthropic", "bedrock"]
    Description: Primary AI provider for content analysis
  
  FallbackAIProvider:
    Type: String
    Default: "bedrock"
    AllowedValues: ["anthropic", "bedrock", "none"]
    Description: Fallback AI provider if primary fails
  
  PreferredAIModel:
    Type: String
    Default: ""
    Description: Preferred AI model (optional, uses provider default if empty)
  
  EnableModelComparison:
    Type: String
    Default: "false"
    AllowedValues: ["true", "false"]
    Description: Enable multi-provider comparison mode for analysis
  
  AllowedOrigins:
    Type: CommaDelimitedList
    Default: "http://localhost:3000,https://localhost:3000"
    Description: Allowed CORS origins for WebSocket connections

  EnableWebSocket:
    Type: String
    Default: "true"
    AllowedValues: ["true", "false"]
    Description: Enable WebSocket API (disable for SAM local development)

  # Cost Tagging Parameters - Project Management
  ProjectName:
    Type: String
    Default: "feedMiner"
    Description: Project identifier for cost allocation
    
  ResourceOwner:
    Type: String
    Default: "first.last@company.com"
    Description: Technical owner/lead responsible for resources
    
  TeamName:
    Type: String
    Default: "AI-Platform"
    AllowedValues: [AI-Platform, Data-Engineering, Backend-Services, DevOps]
    Description: Responsible development team
    
  CostCenter:
    Type: String
    Default: "CC-1001"
    Description: Budget allocation code for chargeback
    
  RequestedBy:
    Type: String
    Default: "product-team@company.com"
    Description: Business stakeholder who requested the project

  # Cost Tagging Parameters - Business Context
  BusinessUnit:
    Type: String
    Default: "Engineering"
    AllowedValues: [Engineering, Product, Research, Operations, Finance]
    Description: Organizational unit for cost allocation
    
  BusinessValue:
    Type: String
    Default: "Experimental"
    AllowedValues: [Revenue-Critical, Operational, Experimental, Research]
    Description: Business importance classification
    
  CustomerImpact:
    Type: String
    Default: "Low"
    AllowedValues: [High, Medium, Low]
    Description: User-facing criticality level

  # Cost Tagging Parameters - Operational
  MonitoringLevel:
    Type: String
    Default: "Standard"
    AllowedValues: [Basic, Standard, Detailed]
    Description: Monitoring intensity and associated costs
    
  AutoShutdown:
    Type: String
    Default: "Disabled"
    AllowedValues: [Enabled, Disabled]
    Description: Automated resource shutdown for cost optimization
    
  SupportLevel:
    Type: String
    Default: "Business-Hours"
    AllowedValues: [24x7, Business-Hours, Best-Effort]
    Description: Support tier and associated costs
    
  MaintenanceWindow:
    Type: String
    Default: "Sunday-2AM-UTC"
    Description: Scheduled maintenance window

  # Cost Tagging Parameters - Version and Deployment
  ApplicationVersion:
    Type: String
    Default: "0.2.0"
    Description: Application version for release tracking
    
  DeploymentActor:
    Type: String
    Default: "manual-deployment"
    Description: Who/what triggered the deployment
    
  DeploymentDate:
    Type: String
    Default: "2025-07-13"
    Description: Deployment date for resource age tracking

  # Cost Tagging Parameters - Compliance (Optional)
  DataClassification:
    Type: String
    Default: "Internal"
    AllowedValues: [Public, Internal, Confidential, Restricted]
    Description: Data sensitivity level for compliance
    
  ComplianceFramework:
    Type: String
    Default: "SOC2"
    AllowedValues: [SOC2, GDPR, HIPAA, PCI-DSS, None]
    Description: Applicable regulatory framework

Globals:
  Function:
    Runtime: python3.12
    Timeout: 30
    MemorySize: 512
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        ANTHROPIC_API_KEY: !Ref AnthropicApiKey
        CONTENT_BUCKET: !Ref ContentBucket
        WEBSOCKET_API_ENDPOINT: !If 
          - ShouldCreateWebSocket
          - !Sub "${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
          - "DISABLED"
        DYNAMODB_TABLE_PREFIX: !Sub "${AWS::StackName}-${Environment}"
        # Multi-Model AI Configuration (v0.2.0)
        PRIMARY_AI_PROVIDER: !Ref PrimaryAIProvider
        FALLBACK_AI_PROVIDER: !Ref FallbackAIProvider
        PREFERRED_AI_MODEL: !Ref PreferredAIModel
        ENABLE_MODEL_COMPARISON: !Ref EnableModelComparison
        # Debug mode for testing with small datasets
        DEBUG_MODE: "true"
    Tracing: Active
    Architectures:
      - arm64
    # Comprehensive Cost Tracking Tags - Applied to ALL Lambda Functions
    Tags:
      # === PROJECT MANAGEMENT TAGS ===
      Project: !Ref ProjectName
      Owner: !Ref ResourceOwner
      Team: !Ref TeamName
      CostCenter: !Ref CostCenter
      RequestedBy: !Ref RequestedBy
      
      # === ENVIRONMENT & LIFECYCLE TAGS ===
      Environment: !Ref Environment
      Stage: !Ref Environment
      Version: !Ref ApplicationVersion
      DeployedBy: !Ref DeploymentActor
      CreatedDate: !Ref DeploymentDate
      LastModified: !Ref "AWS::StackId"  # Will be updated on each deployment
      
      # === TECHNICAL ARCHITECTURE TAGS ===
      Technology: "Serverless"
      Architecture: "Event-Driven"
      Runtime: "Python3.12"
      Purpose: "Compute"
      Component: "Lambda-Function"
      
      # === BUSINESS CONTEXT TAGS ===
      BusinessUnit: !Ref BusinessUnit
      Application: "feedMiner"
      Service: "ContentProcessing"
      CustomerImpact: !Ref CustomerImpact
      BusinessValue: !Ref BusinessValue
      
      # === OPERATIONAL MANAGEMENT TAGS ===
      MonitoringLevel: !Ref MonitoringLevel
      BackupSchedule: "Automatic"  # Lambda code is version-controlled
      AutoShutdown: !Ref AutoShutdown
      MaintenanceWindow: !Ref MaintenanceWindow
      SupportLevel: !Ref SupportLevel
      
      # === COMPLIANCE & GOVERNANCE TAGS ===
      DataClassification: !Ref DataClassification
      RetentionPeriod: "Code-Repository"  # Source code retention
      ComplianceFramework: !Ref ComplianceFramework
      EncryptionRequired: "Required"
      AuditScope: "In-Scope"
  

Conditions:
  ShouldCreateWebSocket: !Equals [!Ref EnableWebSocket, "true"]

Resources:
  # WebSocket API for streaming responses
  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Condition: ShouldCreateWebSocket
    Properties:
      Name: !Sub "${AWS::StackName}-websocket-${Environment}"
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"
      # Resource-Specific Cost Tracking Tags
      Tags:
        # Inherit base tags via CloudFormation
        Project: !Ref ProjectName
        Owner: !Ref ResourceOwner
        Team: !Ref TeamName
        CostCenter: !Ref CostCenter
        Environment: !Ref Environment
        BusinessUnit: !Ref BusinessUnit
        Application: "feedMiner"
        # Resource-specific tags
        Purpose: "WebSocket-API-Gateway"
        Component: "Realtime-API"
        Technology: "API-Gateway-V2"
        CustomerImpact: "High"  # Real-time user experience
        MonitoringLevel: !Ref MonitoringLevel
        DataClassification: !Ref DataClassification
        BusinessValue: !Ref BusinessValue

  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Condition: ShouldCreateWebSocket
    Properties:
      ApiId: !Ref WebSocketApi
      StageName: !Ref Environment
      AutoDeploy: true

  # WebSocket Routes
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Condition: ShouldCreateWebSocket
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: "$connect"
      AuthorizationType: NONE
      Target: !Sub "integrations/${ConnectIntegration}"

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Condition: ShouldCreateWebSocket
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: "$disconnect"
      AuthorizationType: NONE
      Target: !Sub "integrations/${DisconnectIntegration}"

  DefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Condition: ShouldCreateWebSocket
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: "$default"
      AuthorizationType: NONE
      Target: !Sub "integrations/${DefaultIntegration}"

  # WebSocket Integrations
  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Condition: ShouldCreateWebSocket
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketConnectFunction.Arn}/invocations"

  DisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Condition: ShouldCreateWebSocket
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketDisconnectFunction.Arn}/invocations"

  DefaultIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Condition: ShouldCreateWebSocket
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketDefaultFunction.Arn}/invocations"



  # Connection management for WebSocket
  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-connections-${Environment}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: connectionId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: connectionId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      # Resource-Specific Cost Tracking Tags
      Tags:
        # Inherit base tags via CloudFormation
        - Key: "Project"
          Value: !Ref ProjectName
        - Key: "Owner"
          Value: !Ref ResourceOwner
        - Key: "Team"
          Value: !Ref TeamName
        - Key: "CostCenter"
          Value: !Ref CostCenter
        - Key: "Environment"
          Value: !Ref Environment
        - Key: "BusinessUnit"
          Value: !Ref BusinessUnit
        - Key: "Application"
          Value: "feedMiner"
        # Resource-specific tags
        - Key: "Purpose"
          Value: "WebSocket-Connection-Management"
        - Key: "Component"
          Value: "Realtime-DataStore"
        - Key: "DataType"
          Value: "Connection-Metadata"
        - Key: "Technology"
          Value: "DynamoDB"
        - Key: "CustomerImpact"
          Value: "High"  # WebSocket connections are user-facing
        - Key: "BackupSchedule"
          Value: "Point-in-Time-Recovery"
        - Key: "RetentionPeriod"
          Value: "2-hours-TTL"
        - Key: "DataClassification"
          Value: !Ref DataClassification
        - Key: "MonitoringLevel"
          Value: !Ref MonitoringLevel

  # Main content storage table
  ContentTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-content-${Environment}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: contentId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: S
        - AttributeName: status
          AttributeType: S
      KeySchema:
        - AttributeName: contentId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserTimeIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: StatusIndex
          KeySchema:
            - AttributeName: status
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      # Resource-Specific Cost Tracking Tags
      Tags:
        # Inherit base tags via CloudFormation
        - Key: "Project"
          Value: !Ref ProjectName
        - Key: "Owner"
          Value: !Ref ResourceOwner
        - Key: "Team"
          Value: !Ref TeamName
        - Key: "CostCenter"
          Value: !Ref CostCenter
        - Key: "Environment"
          Value: !Ref Environment
        - Key: "BusinessUnit"
          Value: !Ref BusinessUnit
        - Key: "Application"
          Value: "feedMiner"
        # Resource-specific tags
        - Key: "Purpose"
          Value: "Primary-Content-Storage"
        - Key: "Component"
          Value: "Core-DataStore"
        - Key: "DataType"
          Value: "Content-Metadata"
        - Key: "Technology"
          Value: "DynamoDB"
        - Key: "CustomerImpact"
          Value: !Ref CustomerImpact
        - Key: "BackupSchedule"
          Value: "Point-in-Time-Recovery"
        - Key: "RetentionPeriod"
          Value: "7-years"  # Long-term content analysis
        - Key: "DataClassification"
          Value: !Ref DataClassification
        - Key: "MonitoringLevel"
          Value: "Detailed"  # Critical data store
        - Key: "BusinessValue"
          Value: !Ref BusinessValue

  # Processing jobs tracking
  JobsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-jobs-${Environment}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: jobId
          AttributeType: S
        - AttributeName: contentId
          AttributeType: S
        - AttributeName: status
          AttributeType: S
      KeySchema:
        - AttributeName: jobId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: ContentIndex
          KeySchema:
            - AttributeName: contentId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: StatusIndex
          KeySchema:
            - AttributeName: status
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      # Resource-Specific Cost Tracking Tags
      Tags:
        # Inherit base tags via CloudFormation
        - Key: "Project"
          Value: !Ref ProjectName
        - Key: "Owner"
          Value: !Ref ResourceOwner
        - Key: "Team"
          Value: !Ref TeamName
        - Key: "CostCenter"
          Value: !Ref CostCenter
        - Key: "Environment"
          Value: !Ref Environment
        - Key: "BusinessUnit"
          Value: !Ref BusinessUnit
        - Key: "Application"
          Value: "feedMiner"
        # Resource-specific tags
        - Key: "Purpose"
          Value: "Async-Job-Tracking"
        - Key: "Component"
          Value: "Workflow-DataStore"
        - Key: "DataType"
          Value: "Job-Status"
        - Key: "Technology"
          Value: "DynamoDB"
        - Key: "CustomerImpact"
          Value: "Medium"  # Behind-the-scenes processing
        - Key: "BackupSchedule"
          Value: "Point-in-Time-Recovery"
        - Key: "RetentionPeriod"
          Value: "90-days"  # Job history
        - Key: "DataClassification"
          Value: !Ref DataClassification
        - Key: "MonitoringLevel"
          Value: !Ref MonitoringLevel

  # S3 bucket for content storage
  ContentBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-content-${Environment}-${AWS::AccountId}"
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST, DELETE, HEAD]
            AllowedOrigins: !Ref AllowedOrigins
            MaxAge: 3000
      LifecycleConfiguration:
        Rules:
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
          - Id: TransitionToIA
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
              - TransitionInDays: 90
                StorageClass: GLACIER
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt ContentAnalysisAgent.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: uploads/
      # Resource-Specific Cost Tracking Tags
      Tags:
        # Inherit base tags via CloudFormation
        - Key: "Project"
          Value: !Ref ProjectName
        - Key: "Owner"
          Value: !Ref ResourceOwner
        - Key: "Team"
          Value: !Ref TeamName
        - Key: "CostCenter"
          Value: !Ref CostCenter
        - Key: "Environment"
          Value: !Ref Environment
        - Key: "BusinessUnit"
          Value: !Ref BusinessUnit
        - Key: "Application"
          Value: "feedMiner"
        # Resource-specific tags
        - Key: "Purpose"
          Value: "Content-Object-Storage"
        - Key: "Component"
          Value: "Primary-ObjectStore"
        - Key: "DataType"
          Value: "Raw-Content-Files"
        - Key: "Technology"
          Value: "S3"
        - Key: "CustomerImpact"
          Value: !Ref CustomerImpact
        - Key: "BackupSchedule"
          Value: "Cross-Region-Replication"
        - Key: "RetentionPeriod"
          Value: "7-years"  # Long-term content storage
        - Key: "DataClassification"
          Value: !Ref DataClassification
        - Key: "EncryptionRequired"
          Value: "Required"
        - Key: "MonitoringLevel"
          Value: "Detailed"  # Critical storage
        - Key: "BusinessValue"
          Value: !Ref BusinessValue
        - Key: "StorageClass"
          Value: "Intelligent-Tiering"
    DependsOn:
      - ContentAnalysisAgentS3Permission

  # Lambda Layers for AI Dependencies (v0.2.0)
  AIProvidersLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub "${AWS::StackName}-ai-providers-${Environment}"
      Description: "AI providers dependencies for multi-model support (Anthropic, Bedrock)"
      ContentUri: layers/ai-providers/
      CompatibleRuntimes:
        - python3.12
      CompatibleArchitectures:
        - arm64
      RetentionPolicy: Delete
    Metadata:
      BuildMethod: python3.12
      BuildArchitecture: arm64

  # WebSocket Lambda functions
  WebSocketConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-websocket-connect-${Environment}"
      CodeUri: src/websocket/
      Handler: connect.handler
      Environment:
        Variables:
          CONNECTIONS_TABLE: !Ref ConnectionsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConnectionsTable

  WebSocketDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-websocket-disconnect-${Environment}"
      CodeUri: src/websocket/
      Handler: disconnect.handler
      Environment:
        Variables:
          CONNECTIONS_TABLE: !Ref ConnectionsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConnectionsTable

  WebSocketDefaultFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-websocket-default-${Environment}"
      CodeUri: src/websocket/
      Handler: default.handler
      Environment:
        Variables:
          CONNECTIONS_TABLE: !Ref ConnectionsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConnectionsTable
        - !If
            - ShouldCreateWebSocket
            - Statement:
                Effect: Allow
                Action:
                  - execute-api:ManageConnections
                Resource: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/${Environment}/*"
            - !Ref "AWS::NoValue"

  # Lambda Permissions for WebSocket API
  WebSocketConnectPermission:
    Type: AWS::Lambda::Permission
    Condition: ShouldCreateWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketConnectFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*"

  WebSocketDisconnectPermission:
    Type: AWS::Lambda::Permission
    Condition: ShouldCreateWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketDisconnectFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*"

  WebSocketDefaultPermission:
    Type: AWS::Lambda::Permission
    Condition: ShouldCreateWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketDefaultFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*"

  # Strands agent Lambda functions
  ContentAnalysisAgent:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-content-analysis-${Environment}"
      CodeUri: src/agents/
      Handler: content_analysis.handler
      Timeout: 900  # 15 minutes (maximum allowed) for large dataset processing
      MemorySize: 2560  # Increased memory for processing large datasets (~$0.08/analysis
      Layers:
        - !Ref AIProvidersLayer
      Environment:
        Variables:
          CONTENT_TABLE: !Ref ContentTable
          JOBS_TABLE: !Ref JobsTable
          CONTENT_BUCKET: !Sub "${AWS::StackName}-content-${Environment}-${AWS::AccountId}"
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ContentTable
        - DynamoDBCrudPolicy:
            TableName: !Ref JobsTable
        - Statement:
            Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
            Resource: !Sub "arn:aws:s3:::${AWS::StackName}-content-${Environment}-${AWS::AccountId}/*"
        - !If
            - ShouldCreateWebSocket
            - Statement:
                Effect: Allow
                Action:
                  - execute-api:ManageConnections
                Resource: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/${Environment}/*"
            - !Ref "AWS::NoValue"

  SummarizationAgent:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-summarization-${Environment}"
      CodeUri: src/agents/
      Handler: summarization.handler
      Timeout: 300
      MemorySize: 1024
      Environment:
        Variables:
          CONTENT_TABLE: !Ref ContentTable
          JOBS_TABLE: !Ref JobsTable
          CONTENT_BUCKET: !Sub "${AWS::StackName}-content-${Environment}-${AWS::AccountId}"
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ContentTable
        - DynamoDBCrudPolicy:
            TableName: !Ref JobsTable
        - Statement:
            Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
            Resource: !Sub "arn:aws:s3:::${AWS::StackName}-content-${Environment}-${AWS::AccountId}/*"
        - !If
            - ShouldCreateWebSocket
            - Statement:
                Effect: Allow
                Action:
                  - execute-api:ManageConnections
                Resource: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/${Environment}/*"
            - !Ref "AWS::NoValue"

  ExtractionAgent:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-extraction-${Environment}"
      CodeUri: src/agents/
      Handler: extraction.handler
      Timeout: 300
      MemorySize: 1024
      Environment:
        Variables:
          CONTENT_TABLE: !Ref ContentTable
          JOBS_TABLE: !Ref JobsTable
          CONTENT_BUCKET: !Sub "${AWS::StackName}-content-${Environment}-${AWS::AccountId}"
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ContentTable
        - DynamoDBCrudPolicy:
            TableName: !Ref JobsTable
        - Statement:
            Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
            Resource: !Sub "arn:aws:s3:::${AWS::StackName}-content-${Environment}-${AWS::AccountId}/*"
        - !If
            - ShouldCreateWebSocket
            - Statement:
                Effect: Allow
                Action:
                  - execute-api:ManageConnections
                Resource: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/${Environment}/*"
            - !Ref "AWS::NoValue"

  # API Gateway for REST endpoints
  FeedMinerApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${AWS::StackName}-api-${Environment}"
      StageName: !Ref Environment
      TracingEnabled: true
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      MethodSettings:
        - HttpMethod: "*"
          ResourcePath: "/*"
          ThrottlingRateLimit: 100
          ThrottlingBurstLimit: 200
      # Resource-Specific Cost Tracking Tags
      Tags:
        # Inherit base tags via CloudFormation
        Project: !Ref ProjectName
        Owner: !Ref ResourceOwner
        Team: !Ref TeamName
        CostCenter: !Ref CostCenter
        Environment: !Ref Environment
        BusinessUnit: !Ref BusinessUnit
        Application: "feedMiner"
        # Resource-specific tags
        Purpose: "REST-API-Gateway"
        Component: "HTTP-API"
        Technology: "API-Gateway"
        CustomerImpact: !Ref CustomerImpact
        MonitoringLevel: !Ref MonitoringLevel
        DataClassification: !Ref DataClassification
        BusinessValue: !Ref BusinessValue

  # REST API Lambda functions
  ContentUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-content-upload-${Environment}"
      CodeUri: src/api/
      Handler: upload.handler
      Environment:
        Variables:
          CONTENT_TABLE: !Ref ContentTable
          CONTENT_BUCKET: !Ref ContentBucket
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ContentTable
        - S3WritePolicy:
            BucketName: !Ref ContentBucket
      Events:
        UploadApi:
          Type: Api
          Properties:
            RestApiId: !Ref FeedMinerApi
            Path: /upload
            Method: POST

  # Multi-File Instagram Upload Function (v0.3.0)
  MultiUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-multi-upload-${Environment}"
      CodeUri: src/api/
      Handler: multi_upload.handler
      Timeout: 300  # 5 minutes for ZIP processing
      MemorySize: 1024  # Higher memory for ZIP extraction
      Environment:
        Variables:
          CONTENT_TABLE: !Ref ContentTable
          CONTENT_BUCKET: !Ref ContentBucket
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ContentTable
        - S3CrudPolicy:
            BucketName: !Ref ContentBucket
      Events:
        MultiUploadApi:
          Type: Api
          Properties:
            RestApiId: !Ref FeedMinerApi
            Path: /multi-upload
            Method: POST
      # Resource-Specific Cost Tracking Tags
      Tags:
        Project: !Ref ProjectName
        Owner: !Ref ResourceOwner
        Team: !Ref TeamName
        CostCenter: !Ref CostCenter
        Environment: !Ref Environment
        BusinessUnit: !Ref BusinessUnit
        Application: "feedMiner"
        Purpose: "Multi-File-Upload-Processing"
        Component: "API-Lambda"
        Version: !Ref ApplicationVersion

  ContentListFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-content-list-${Environment}"
      CodeUri: src/api/
      Handler: list.handler
      Environment:
        Variables:
          CONTENT_TABLE: !Ref ContentTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ContentTable
      Events:
        ListApi:
          Type: Api
          Properties:
            RestApiId: !Ref FeedMinerApi
            Path: /content
            Method: GET

  ContentGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-content-get-${Environment}"
      CodeUri: src/api/
      Handler: get.handler
      Environment:
        Variables:
          CONTENT_TABLE: !Ref ContentTable
          CONTENT_BUCKET: !Ref ContentBucket
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ContentTable
        - Statement:
            Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
            Resource: !Sub "arn:aws:s3:::${AWS::StackName}-content-${Environment}-${AWS::AccountId}/*"
      Events:
        GetApi:
          Type: Api
          Properties:
            RestApiId: !Ref FeedMinerApi
            Path: /content/{contentId}
            Method: GET

  # Job management
  JobStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-job-status-${Environment}"
      CodeUri: src/api/
      Handler: job_status.handler
      Environment:
        Variables:
          JOBS_TABLE: !Ref JobsTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref JobsTable
      Events:
        JobStatusApi:
          Type: Api
          Properties:
            RestApiId: !Ref FeedMinerApi
            Path: /jobs/{jobId}
            Method: GET

  # Model Switching and Comparison API (v0.2.0)
  ModelSwitchingFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-model-switching-${Environment}"
      CodeUri: src/api/
      Handler: strands_model_switching.handler
      Timeout: 300  # 5 minutes for AI comparison
      MemorySize: 1024
      Layers:
        - !Ref AIProvidersLayer
      Environment:
        Variables:
          CONTENT_TABLE: !Ref ContentTable
          CONTENT_BUCKET: !Ref ContentBucket
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ContentTable
        - S3ReadPolicy:
            BucketName: !Ref ContentBucket
        - Statement:
            Effect: Allow
            Action:
              - bedrock:InvokeModel
              - bedrock:InvokeModelWithResponseStream
            Resource: "*"
      Events:
        AnalyzeWithProviderApi:
          Type: Api
          Properties:
            RestApiId: !Ref FeedMinerApi
            Path: /analyze/{contentId}
            Method: POST
        CompareProvidersApi:
          Type: Api
          Properties:
            RestApiId: !Ref FeedMinerApi
            Path: /compare/{contentId}
            Method: POST

  # Debug Layer Function (temporary)
  DebugLayerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-debug-layer-${Environment}"
      CodeUri: src/api/
      Handler: debug_layer.handler
      Layers:
        - !Ref AIProvidersLayer
      Events:
        DebugApi:
          Type: Api
          Properties:
            RestApiId: !Ref FeedMinerApi
            Path: /debug
            Method: GET

  # S3 Lambda Permission for Content Analysis
  ContentAnalysisAgentS3Permission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ContentAnalysisAgent
      Principal: s3.amazonaws.com
      SourceArn: !Sub "arn:aws:s3:::${AWS::StackName}-content-${Environment}-${AWS::AccountId}"

  # Enhanced Instagram Parser with Multi-Model AI Support (v0.2.0)
  EnhancedInstagramParserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-enhanced-instagram-parser-${Environment}"
      CodeUri: src/agents/
      Handler: instagram_parser.handler
      Timeout: 900  # 15 minutes for large dataset processing
      MemorySize: 2560  # Increased memory for large dataset processing
      Layers:
        - !Ref AIProvidersLayer
      Environment:
        Variables:
          CONTENT_TABLE: !Ref ContentTable
          JOBS_TABLE: !Ref JobsTable
          CONTENT_BUCKET: !Ref ContentBucket
          # AI Provider Configuration
          PREFERRED_AI_PROVIDER: !Ref PrimaryAIProvider
          PREFERRED_AI_MODEL: !Ref PreferredAIModel
          ANTHROPIC_API_KEY: !Ref AnthropicApiKey
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ContentTable
        - DynamoDBCrudPolicy:
            TableName: !Ref JobsTable
        - S3ReadPolicy:
            BucketName: !Ref ContentBucket
        - S3WritePolicy:
            BucketName: !Ref ContentBucket
        - Statement:
            Effect: Allow
            Action:
              - bedrock:InvokeModel
              - bedrock:InvokeModelWithResponseStream
            Resource: "*"
        - !If
            - ShouldCreateWebSocket
            - Statement:
                Effect: Allow
                Action:
                  - execute-api:ManageConnections
                Resource: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/${Environment}/*"
            - !Ref "AWS::NoValue"

  # Processing orchestrator
  ProcessingOrchestratorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-processing-orchestrator-${Environment}"
      CodeUri: src/orchestrator/
      Handler: orchestrator.handler
      Timeout: 60
      Environment:
        Variables:
          CONTENT_TABLE: !Ref ContentTable
          JOBS_TABLE: !Ref JobsTable
          CONTENT_ANALYSIS_FUNCTION: !Ref ContentAnalysisAgent
          SUMMARIZATION_FUNCTION: !Ref SummarizationAgent
          EXTRACTION_FUNCTION: !Ref ExtractionAgent
          INSTAGRAM_PARSER_FUNCTION: !Ref EnhancedInstagramParserFunction
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ContentTable
        - DynamoDBCrudPolicy:
            TableName: !Ref JobsTable
        - LambdaInvokePolicy:
            FunctionName: !Ref ContentAnalysisAgent
        - LambdaInvokePolicy:
            FunctionName: !Ref SummarizationAgent
        - LambdaInvokePolicy:
            FunctionName: !Ref ExtractionAgent
        - LambdaInvokePolicy:
            FunctionName: !Ref EnhancedInstagramParserFunction
      Events:
        ContentTableStream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt ContentTable.StreamArn
            StartingPosition: TRIM_HORIZON
            BatchSize: 10
            MaximumBatchingWindowInSeconds: 5

Outputs:
  WebSocketApiEndpoint:
    Condition: ShouldCreateWebSocket
    Description: WebSocket API Gateway endpoint URL
    Value: !Sub "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
    Export:
      Name: !Sub "${AWS::StackName}-WebSocketEndpoint-${Environment}"

  RestApiEndpoint:
    Description: REST API Gateway endpoint URL
    Value: !Sub "https://${FeedMinerApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
    Export:
      Name: !Sub "${AWS::StackName}-RestApiEndpoint-${Environment}"

  ContentBucketName:
    Description: S3 bucket for content storage
    Value: !Ref ContentBucket
    Export:
      Name: !Sub "${AWS::StackName}-ContentBucket-${Environment}"

  ConnectionsTableName:
    Description: DynamoDB table for WebSocket connections
    Value: !Ref ConnectionsTable
    Export:
      Name: !Sub "${AWS::StackName}-ConnectionsTable-${Environment}"

  ContentTableName:
    Description: DynamoDB table for content metadata
    Value: !Ref ContentTable
    Export:
      Name: !Sub "${AWS::StackName}-ContentTable-${Environment}"

  JobsTableName:
    Description: DynamoDB table for job tracking
    Value: !Ref JobsTable
    Export:
      Name: !Sub "${AWS::StackName}-JobsTable-${Environment}"